/**
 * Description: Implement a program that open the file and read all the unique names 
   including the empty lines "\n" in a file. Replace new line \n with NULL character "\0".
   Print out standard error message if there is an empty line in the file.
   Also learn how to use the basic of Linux command lines.
 * Author names: Khuong Huynh
 * Author emails: khuong.huynh@sjsu.edu
 * Last modified date: 02/19/2023
 * Creation date: 02/15/2023
 **/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

// Define MACRO with 100 names
#define totalNames 100

/*
    argc is the total arguments that provide when running the program.
    argv is the array that hold all the arguments.

    Ex: argc: 2
     -> argv: ["countnames", "names.txt"]
     -> argv is the array

    Note: the first element of argv will be always the program name.

*/

int main(int argc, char *argv[])
{
    /*
        Declare variables
        i - is for loop counter
        uniqueName - is the names in file
        fileLine - initialize to zero
        holdName - to hold the name in the file
        count - hold the name counts in file
        name - read every names in file
    */
    int i = 0; // counter
    int uniqueName = 0;
    int fileLine = 0;
    char holdName[totalNames][256];
    int count[totalNames] = {0};
    char name[256];
    int nameFound;

    // check if argv does hold 2 arguments if not then print statement
    if (argc != 2)
    {
        printf("File is not found!!\n");
    }
    else
    {
        // open file for reading
        FILE *fp = fopen(argv[1], "r");
        // check if there is a file if not print messsage
        if (fp == NULL)
        {
            printf("Cannot open file!!\n");
            // return 1 means program is error
            exit(1);
        }
        // initialize uniqueName to 0 before we count it
        uniqueName = 0;
        /*
            Run the loop from beginning to the end of file,
            Read line by line
            If empty lines print stderr(standard error message) which means the empty line
            Else we replace new line found with NULL character.
            Then we initialized nameFound already exists to 0.
            Check to see if name was already read. If yes, we increment the counter.
            If no, we add it to holdName list and increment the counter.
        */
        while (fgets(name, 256, fp))
        {
            fileLine = fileLine + 1;
            if (!strcmp(name, "\n"))
            {
                fprintf(stderr, "Warning - Line %d is empty\n", fileLine);
            }
            else
            {
                // strcspn returns the index of the first character found
                name[strcspn(name, "\n")] = 0;
                nameFound = 0;
                for (i = 0; i < uniqueName; i++)
                {
                    // strcasecmp compares string1 vs string2
                    if (strcasecmp(holdName[i], name) == 0)
                    {
                        nameFound = 1;
                        break;
                    }
                }
                if (!nameFound)
                {
                    strcpy(holdName[uniqueName], name);
					count[uniqueName]++;
					uniqueName++;
                }
                else
                    count[i]++;
            }
        }
        // close the file pointer
        fclose(fp);

        /*
            print out uniqueName and count how many uniqueName
            Ex:
                Nicky: 1
                Dave Joe: 2
                Yuan Cheng Chang: 3
                John Smith: 1
        */
        for (i = 0; i < uniqueName; i++)
            printf("%s: %d\n", holdName[i], count[i]);
        
    }

    return 0; // return 0 means program is running fine
}

